// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/sms/v1/sms.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTemplateRequestMultiError, or nil if none found.
func (m *CreateTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateTemplateRequest_TemplateName_Pattern.MatchString(m.GetTemplateName()) {
		err := CreateTemplateRequestValidationError{
			field:  "TemplateName",
			reason: "value does not match regex pattern \"[^\\\\s]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateTemplateRequest_Content_Pattern.MatchString(m.GetContent()) {
		err := CreateTemplateRequestValidationError{
			field:  "Content",
			reason: "value does not match regex pattern \"[^\\\\s]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TemplateType

	// no validation rules for Brand

	// no validation rules for TokenId

	// no validation rules for TemplateCode

	// no validation rules for Sign

	// no validation rules for UserId

	// no validation rules for TemplateCount

	// no validation rules for MobileCount

	// no validation rules for TimeInterval

	// no validation rules for Region

	if len(errors) > 0 {
		return CreateTemplateRequestMultiError(errors)
	}

	return nil
}

// CreateTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTemplateRequestMultiError) AllErrors() []error { return m }

// CreateTemplateRequestValidationError is the validation error returned by
// CreateTemplateRequest.Validate if the designated constraints aren't met.
type CreateTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTemplateRequestValidationError) ErrorName() string {
	return "CreateTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTemplateRequestValidationError{}

var _CreateTemplateRequest_TemplateName_Pattern = regexp.MustCompile("[^\\s]+")

var _CreateTemplateRequest_Content_Pattern = regexp.MustCompile("[^\\s]+")

// Validate checks the field values on CreateTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTemplateResponseMultiError, or nil if none found.
func (m *CreateTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderID

	if len(errors) > 0 {
		return CreateTemplateResponseMultiError(errors)
	}

	return nil
}

// CreateTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTemplateResponseMultiError) AllErrors() []error { return m }

// CreateTemplateResponseValidationError is the validation error returned by
// CreateTemplateResponse.Validate if the designated constraints aren't met.
type CreateTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTemplateResponseValidationError) ErrorName() string {
	return "CreateTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTemplateResponseValidationError{}

// Validate checks the field values on UpdateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTemplateRequestMultiError, or nil if none found.
func (m *UpdateTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if !_UpdateTemplateRequest_TemplateName_Pattern.MatchString(m.GetTemplateName()) {
		err := UpdateTemplateRequestValidationError{
			field:  "TemplateName",
			reason: "value does not match regex pattern \"[^\\\\s]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateTemplateRequest_Content_Pattern.MatchString(m.GetContent()) {
		err := UpdateTemplateRequestValidationError{
			field:  "Content",
			reason: "value does not match regex pattern \"[^\\\\s]+\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TemplateType

	// no validation rules for Brand

	// no validation rules for TokenId

	// no validation rules for TemplateCode

	// no validation rules for Sign

	// no validation rules for UserId

	// no validation rules for TemplateCount

	// no validation rules for MobileCount

	// no validation rules for TimeInterval

	// no validation rules for Region

	if len(errors) > 0 {
		return UpdateTemplateRequestMultiError(errors)
	}

	return nil
}

// UpdateTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTemplateRequestMultiError) AllErrors() []error { return m }

// UpdateTemplateRequestValidationError is the validation error returned by
// UpdateTemplateRequest.Validate if the designated constraints aren't met.
type UpdateTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTemplateRequestValidationError) ErrorName() string {
	return "UpdateTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTemplateRequestValidationError{}

var _UpdateTemplateRequest_TemplateName_Pattern = regexp.MustCompile("[^\\s]+")

var _UpdateTemplateRequest_Content_Pattern = regexp.MustCompile("[^\\s]+")

// Validate checks the field values on TemplateReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TemplateReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TemplateReplyMultiError, or
// nil if none found.
func (m *TemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TemplateName

	// no validation rules for Content

	// no validation rules for Type

	// no validation rules for Brand

	// no validation rules for TokenId

	// no validation rules for TemplateCOde

	// no validation rules for Sign

	// no validation rules for UserId

	// no validation rules for ExtCode

	// no validation rules for TemplateCount

	// no validation rules for MobileCount

	// no validation rules for TimeInterval

	// no validation rules for Region

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TemplateReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TemplateReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TemplateReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TemplateReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TemplateReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TemplateReplyMultiError(errors)
	}

	return nil
}

// TemplateReplyMultiError is an error wrapping multiple validation errors
// returned by TemplateReply.ValidateAll() if the designated constraints
// aren't met.
type TemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateReplyMultiError) AllErrors() []error { return m }

// TemplateReplyValidationError is the validation error returned by
// TemplateReply.Validate if the designated constraints aren't met.
type TemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateReplyValidationError) ErrorName() string { return "TemplateReplyValidationError" }

// Error satisfies the builtin error interface
func (e TemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateReplyValidationError{}

// Validate checks the field values on ListTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplateRequestMultiError, or nil if none found.
func (m *ListTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for TemplateCode

	// no validation rules for ExtCode

	if len(errors) > 0 {
		return ListTemplateRequestMultiError(errors)
	}

	return nil
}

// ListTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by ListTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplateRequestMultiError) AllErrors() []error { return m }

// ListTemplateRequestValidationError is the validation error returned by
// ListTemplateRequest.Validate if the designated constraints aren't met.
type ListTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplateRequestValidationError) ErrorName() string {
	return "ListTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplateRequestValidationError{}

// Validate checks the field values on ListTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplateResponseMultiError, or nil if none found.
func (m *ListTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTemplateResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTemplateResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTemplateResponseValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTemplateResponseMultiError(errors)
	}

	return nil
}

// ListTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by ListTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplateResponseMultiError) AllErrors() []error { return m }

// ListTemplateResponseValidationError is the validation error returned by
// ListTemplateResponse.Validate if the designated constraints aren't met.
type ListTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplateResponseValidationError) ErrorName() string {
	return "ListTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplateResponseValidationError{}

// Validate checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateRequestMultiError, or nil if none found.
func (m *GetTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTemplateRequestMultiError(errors)
	}

	return nil
}

// GetTemplateRequestMultiError is an error wrapping multiple validation errors
// returned by GetTemplateRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateRequestMultiError) AllErrors() []error { return m }

// GetTemplateRequestValidationError is the validation error returned by
// GetTemplateRequest.Validate if the designated constraints aren't met.
type GetTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateRequestValidationError) ErrorName() string {
	return "GetTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateRequestValidationError{}

// Validate checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateRequestMultiError, or nil if none found.
func (m *DeleteTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTemplateRequestMultiError(errors)
	}

	return nil
}

// DeleteTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateRequestMultiError) AllErrors() []error { return m }

// DeleteTemplateRequestValidationError is the validation error returned by
// DeleteTemplateRequest.Validate if the designated constraints aren't met.
type DeleteTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateRequestValidationError) ErrorName() string {
	return "DeleteTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateRequestValidationError{}
